<?php

/**
 * Implementation of hook_perm().
 */
function viewer3d_perm() {
  return array(
    'administer viewer',
    'administer points',
    'view model'
  );
}

/**
 * Implementation of hook_menu().
 */
function viewer3d_menu() {
  $items = array();

  $items['admin/settings/3dviewer'] = array(
    'title' => '3D viewer',
    'description' => t('Configure 3D viewer (flash model)'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('viewer3d_admin_form'),
    'access arguments' => array('administer viewer'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/viewer3d.admin.inc',
  );

  $items['admin/settings/3dviewer/settings'] = array(
    'title' => '3D viewer',
    'description' => t('Configure 3D viewer (flash model)'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/settings/3dviewer/points'] = array(
    'title' => 'Points',
    'description' => t('Configure points'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('viewer3d_points_form'),
    'access arguments' => array('administer points'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/viewer3d.points.inc',
  );

  // Viewer callback, that generate page.
  $settings = variable_get('viewer3d', array());
  if (isset($settings['path'])) {
    $items[$settings['path']] = array(
      'title' => t('3D viewer'),
      'description' => t('Display 3D viewer'),
      'page callback' => 'viewer3d_page',
      'access arguments' => array('view model'),
      'type' => MENU_CALLBACK,
    );

    $items[$settings['path'] . '/ajax'] = array(
      'title' => t('3D viewer'),
      'description' => t('Display 3D viewer'),
      'page callback' => 'viewer3d_ajax',
      'access arguments' => array('view model'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/viewer3d.ajax.inc',
    );
  }

  return $items;
}

function viewer3d_page() {
  // Build settings array to set to jQuery.
  $path = drupal_get_path('module', 'viewer3d');
  $settings = variable_get('viewer3d', array());
  $settings['flash_location'] = $path;

  // Build rute list.
  $points =  variable_get('viewer3d_points', array());
  viewer3d_points_weight_sort($points);
  if (!empty($points)) {
    $route = array();
    $length = count($points);
    for ($i = 0; $length > $i; $i++) {
      $prev = ($i == 0) ? $points[$length-1]['pid'] : $points[$i-1]['pid'];
      $next = ($i == $length-1) ? $points[0]['pid'] : $points[$i+1]['pid'];
      $route[$points[$i]['pid']] = array(
        'prev' => array('pid' => $prev, 'jump' => $points[$i]['jump_type']['prev']),
        'next' => array('pid' => $next, 'jump' => $points[$i]['jump_type']['next']),
      );
    }
  }

  // Add all the javascript bits.
  drupal_add_js(array('viewer3d' => $settings), 'setting');
  drupal_add_js(array('viewer3d_route' => $route), 'setting');
  drupal_add_js($path . '/js/swfobject.js', 'module');
  drupal_add_js($path . '/js/viewer3d.js', 'module');
  drupal_add_js($path . '/js/jquery.tipsy.js', 'module');

  // Create viewer placeholder.
  $output = '';
  if (isset($settings['text']) && $settings['text'] != '') {
    $output .= '<p>' . $settings['text'] . '</p>';
  }

  // Outer wrapper.
  $output .= '<div id="building-viewer-outer-wrapper">';

  // Overlay.
  $output .= '<div class="building-viewer-overlay"></div>';

  // Help.
  $output .= '<div id="building-viewer-help">';
  $output .= '<a href="#close" class="building-viewer-close"><span>' . t('Close') . '</span></a>';
  $output .= '<div id="building-viewer-help-inner-wrapper">';
  $output .= '<h3>[Hjælpetekst header]</h3>';
  $output .= '[Hjælpe tekst (skal hentes fra 3D viewer settings)]';
  $output .= '</div>';
  $output .= '</div>';

  // Build navigation bar.
  $output .= '<div id="building-viewer-nav-wrapper">';
  $output .= '<ul id="building-viewer-nav">';

  // Start link.
  $output .= '<li class="home"><a href="javascript:viewer3dGotoLocation('.$settings['currentLocation'].','.$settings['angle'].','.$settings['angle2'].')" title="' . t('Click here to go back to the starting point') . '">' . t('Back to start') . '</a></li>';

  // Prev button (action is added in front-end).
  $output .= '<li class="previous"><a href="#" title="' . t('Go to previous destination') . '">' . t('Previous destination') . '</a></li>';

  // Next button (action is added in front-end).
  $output .= ' <li class="next last"><a href="#" title="' . t('Go to next destination') . '">' . t('Next destination') . '</a></li>';
  $output .= ' <li class="help"><a href="#" title="' . t('Help') . '">' . t('Help') . '</a></li>';

  $output .= '</ul>';

  $output .= '<ul id="building-viewer-menu">';
//      <li class="first"><a href="#" title="Menu">Menu</a></li>
//      <li><a href="#" title="Hjælp">Hjælp</a></li>
  $output .= '</ul>';
  $output .= '</div>';
  
  // Viewer placeholder
  $output .= '<div id="building-viewer-wrapper">';
  $output .= '<div id="building-viewer"></div>';
  $output .= '</div>';

  $output .= '<div id="building-viewer-point-tipsy">';
  $output .= '<a href="#" title="Test tipsy">#####</a>';
  $output .= '</div>';

  // Point title
  $output .= '<div id="building-viewer-point-title">';
  $output .= viewer3d_get_point_title($settings['currentLocation']);
  $output .= '</div>';

  // Point information
  $output .= '<div id="building-viewer-point-information">';
  $output .= '<a href="#close" class="building-viewer-close"><span>' . t('Close') . '</span></a>';
  $output .= '<div class="building-viewer-point-inner"></div>';
  $output .= '</div>';

  // Outer wrapper.
  $output .= '</div>';

  return $output;
}

/**
 * Implementation of hook_theme().
 */
function viewer3d_theme() {
  $items = array();

  $items['viewer3d_points_form'] = array(
    'arguments' => array('form' => array()),
    'file' => drupal_get_path('module', 'viewer3d') . '/includes/viewer3d.points.inc',
    'path' => drupal_get_path('theme', 'rubik') .'/templates',
    'template' => 'form-default',
    'preprocess functions' => array(
      'rubik_preprocess_form_buttons',
      'rubik_preprocess_form_legacy',
      'rubik_preprocess_form_filter',
    ),
  );
  
  return $items;
}

/**
 * Sort the points stored in the default database format.
 *
 * @param array $points
 */
function viewer3d_points_weight_sort(&$points) {
  usort($points, '_viewer3d_points_weight_sort');
}

/**
 * Compare function used by sort.
 */
function _viewer3d_points_weight_sort($a, $b) {
  if ($a['weight'] < $b['weight']) {
    return -1;
  }
  elseif ($a['weight'] > $b['weight']) {
    return 1;
  }
  return 0;
}

/**
 * Compare function used by sort.
 */
function _viewer3d_points_name_sort($a, $b) {
  if ($a['name'] < $b['name']) {
    return -1;
  }
  elseif ($a['name'] > $b['name']) {
    return 1;
  }
  return 0;
}

/**
 * Implementaion of hook_form_alter(). We use it to hook into the node edit
 * form for 3D points and add selection of viewer 3D point.
 */
function viewer3d_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'point3d_node_form') {
    // Load a sort points.
    $points = variable_get('viewer3d_points', array());
    $points_used = variable_get('viewer3d_points_used', array());
    if (!empty($points)) {
      usort($points, '_viewer3d_points_name_sort');
    }

    // Create dropdown with un-used points + current point.
    $options = array('none' => t('None'));
    foreach ($points as $point) {
      if (!isset($points_used[$point['pid']])) {
        $options[$point['pid']] = $point['name'];
      }
      elseif (isset($form['nid']) && $points_used[$point['pid']] == $form['nid']['#value']) {
        // Enable the user to select "current" point once more.
        $options[$point['pid']] = $point['name'];
        $default_value = $point['pid'];
      }
    }

    // Save current point, used later to update array.
    $form['points3d_old'] = array(
      '#type' => 'hidden',
      '#value' => $default_value,
    );
    
    $form['points3d'] = array(
      '#type' => 'select',
      '#title' => t('Select 3D point reference'),
      '#description' => t('Only points that is not used yet is selectable. If points are missing please go to the point administrator a re-save the route.'),
      '#options' => $options,
      '#default_value' => $default_value,
    );

    $form['#submit'][] = 'viewer3d_form_alter_submit';
  }
}

/**
 * Form submittion handler to save 3D points content type relations to XML
 * points.
 */
function viewer3d_form_alter_submit($form, &$form_state) {
  $points_used = variable_get('viewer3d_points_used', array());

  // Remove old value.
  if (isset($points_used[$form_state['values']['points3d_old']])) {
    unset($points_used[$form_state['values']['points3d_old']]);
  }
  
  // Set new value.
  $points_used[$form_state['values']['points3d']] = $form_state['values']['nid'];
  variable_set('viewer3d_points_used', $points_used);
  unset($form_state['values']['points3d']);
}

function viewer3d_get_point_title($pid, $html = TRUE) {
  $settings = variable_get('viewer3d', array());
  $points = variable_get('viewer3d_points_used', array());

  $title = t('Point @pid', array('@pid' => $pid));
  if (isset($points[$pid])) {
    $result = db_query('SELECT title FROM {node} WHERE nid=%d', $points[$pid]);
    $title = db_fetch_object($result)->title;
  }

  if ($html) {
    return l($title, $settings['path'].'/ajax/info/'.$pid);
  }
  else {
    return $title;
  }
}